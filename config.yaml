# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:
  Airport1:
    url: "机场订阅填到这里，两端引号不要去掉，不要填写到下方链接里去！！"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
# interface-name: enp6s18
log-level: warning
find-process-mode: 'off'
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
profile:
  store-selected: true
  store-fake-ip: true

# 为防止使用插件朋友遇到面板问题，我注释掉了此模块。
# 跑裸核朋友自行删除注释即可
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/mihomo/ui"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略，基于SimpleClashRule_Lite.ini的分组配置
# 控制分组和服务分组按照Lite版本的逻辑进行配置
proxy-groups:
  # 控制分组
  - {name: ✈️ 手动选择, type: select, include-all: true}
  - {name: 🛩️ 手动选择备用, type: select, include-all: true}
  - {name: 🚢 手动选择2, type: select, include-all: true}
  - {name: 🚁 自建节点, type: select, include-all: true, filter: "(自建|self|dev)"}
  
  # 常用服务分组
  - {name: 📲 Telegram, type: select, proxies: [直连, 🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点]}
  - {name: 🎬 Emby, type: select, proxies: [🚀 国外代理, 🎯 国内直连, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点], include-all: true, filter: "(Emby|emby)"}
  - {name: 🤖 AI, type: select, proxies: [🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点], include-all: true, filter: "(美国|US|日本|JP)"}
  - {name: 💰 交易所, type: select, proxies: [🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点], include-all: true, filter: "(新加坡|SG|香港|HK|日本|JP|美国|US)"}
  
  # 流媒体服务分组
  - {name: 📹 YouTube, type: select, proxies: [🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点], include-all: true, filter: "(阿根廷|AR|Argentina|土耳其|TR|Turkey|俄罗斯|RU|Russia|澳门|MO|Macao)"}
  - {name: 🎥 Netflix, type: select, proxies: [🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点], include-all: true, filter: "(新加坡|SG|香港|HK|台湾|TW|美国|US)"}
  - {name: 📺 Bilibili, type: select, proxies: [🎯 国内直连, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点], include-all: true, filter: "(香港|HK|台湾|TW)"}
  
  # 其他服务分组
  - {name: 🍎 Apple, type: select, proxies: [🎯 国内直连, 🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点]}
  - {name: Ⓜ️ Microsoft, type: select, proxies: [🎯 国内直连, 🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点]}
  
  # 系统分组
  - {name: 🚀 国外代理, type: select, proxies: [✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点], include-all: true}
  - {name: 🎯 国内直连, type: select, proxies: [直连, 🚀 国外代理, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 国外代理, 🎯 国内直连, ✈️ 手动选择, 🛩️ 手动选择备用, 🚢 手动选择2, 🚁 自建节点]}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇸🇬 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"}
  - {name: 🔯 狮城故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|深|美)).)*$"}
  - {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日)).)*$"}
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"}
  - {name: ♻️ 狮城自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美)).)*$"}
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配 - 按照SimpleClashRule_Lite.ini的优先级顺序
rules:
  - RULE-SET,private_ip,直连
  - RULE-SET,private_domain,直连
  - DOMAIN-SUFFIX,qichiyu.com,🚀 国外代理
  - RULE-SET,proxylite,🚀 国外代理
  - RULE-SET,exchange_binance,💰 交易所
  - RULE-SET,exchange_custom,💰 交易所
  - RULE-SET,microsoft_domain,Ⓜ️ Microsoft
  - RULE-SET,microsoft_custom,Ⓜ️ Microsoft
  - RULE-SET,emby_custom,🎬 Emby
  - RULE-SET,ai_openai,🤖 AI
  - RULE-SET,ai_claude,🤖 AI
  - RULE-SET,ai_gemini,🤖 AI
  - RULE-SET,ai_copilot,🤖 AI
  - RULE-SET,ai_custom,🤖 AI
  - RULE-SET,local_area_network,🎯 国内直连
  - RULE-SET,china_domain,🎯 国内直连
  - RULE-SET,china_company_ip,🎯 国内直连
  - RULE-SET,china_ip,🎯 国内直连
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,netflix_domain,🎥 Netflix
  - RULE-SET,bilibili_domain,📺 Bilibili
  - RULE-SET,bilibili_custom,📺 Bilibili
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,geolocation-!cn,🚀 国外代理
  - MATCH,🐟 漏网之鱼

# 规则集 - 基于SimpleClashRule_Lite.ini的规则配置
## type：可选http/file/inline  behavior：可选domain/ipcidr/classical format：可选yaml/text/mrs
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  
  # 交易所规则
  exchange_binance: { <<: *class, url: "https://raw.githubusercontent.com/StricklandF/Filter/main/Binance.list"}
  exchange_custom: { <<: *class, url: "https://raw.githubusercontent.com/asakushen/ClashRule/main/Rule/Exchange_Custom.list"}
  
  # 微软服务规则
  microsoft_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Microsoft.list"}
  microsoft_custom: { <<: *class, url: "https://raw.githubusercontent.com/asakushen/ClashRule/main/Microsoft.yaml"}
  
  # Emby规则
  emby_custom: { <<: *class, url: "https://raw.githubusercontent.com/asakushen/ClashRule/main/Emby.yaml"}
  
  # AI服务规则
  ai_openai: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml"}
  ai_claude: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Claude/Claude.yaml"}
  ai_gemini: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Gemini/Gemini.yaml"}
  ai_copilot: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Copilot/Copilot.yaml"}
  ai_custom: { <<: *class, url: "https://raw.githubusercontent.com/asakushen/ClashRule/main/Rule/AI_Custom.list"}
  
  # 局域网和国内规则
  local_area_network: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list"}
  china_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list"}
  china_company_ip: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list"}
  china_ip: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaIp.list"}
  
  # 流媒体服务规则
  youtube_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTube.list"}
  netflix_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Netflix.list"}
  bilibili_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Bilibili.list"}
  bilibili_custom: { <<: *class, url: "https://raw.githubusercontent.com/asakushen/ClashRule/main/Rule/Bilibili_Custom.list"}
  
  # 通讯和其他服务规则
  telegram_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Telegram.list"}
  apple_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list"}
  
  # 地理位置规则
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  
  private_ip: {<<: *ip, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geoip/private.mrs"}
